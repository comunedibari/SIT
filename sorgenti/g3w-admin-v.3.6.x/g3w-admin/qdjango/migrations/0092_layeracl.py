# Generated by Django 2.2.26 on 2022-02-10 06:37

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields


def pre_layer_acl(apps, schema_editor):
    """
    Check if table qdjango_layeracl exists.
    If it exists rename it to __django_layeracl.
    This is a fix for upgrade from version 3.3.x to 3.4.x
    """
    conn = schema_editor.connection

    with conn.cursor() as cursor:
        cursor.execute("SELECT EXISTS ("
                       "SELECT FROM pg_tables WHERE schemaname = 'public' AND tablename  = 'qdjango_layeracl'"
                       ");")
        row = cursor.fetchone()

    if not row[0]:
        return

    with conn.cursor() as cursor:
        cursor.execute(
            "ALTER TABLE public.qdjango_layeracl DROP CONSTRAINT qdjango_layeracl_group_id_0081b644_fk_auth_group_id;"
        )
        cursor.execute(
            "ALTER TABLE public.qdjango_layeracl DROP CONSTRAINT qdjango_layeracl_layer_id_2d225da8_fk_qdjango_layer_id;"
        )
        cursor.execute(
            "ALTER TABLE public.qdjango_layeracl DROP CONSTRAINT qdjango_layeracl_user_id_413d5dc8_fk_auth_user_id;"
        )
        cursor.execute(
            "ALTER TABLE public.qdjango_layeracl DROP CONSTRAINT qdjango_layeracl_pkey;"
        )

        cursor.execute("DROP INDEX public.qdjango_layeracl_group_id_0081b644;")
        cursor.execute("DROP INDEX public.qdjango_layeracl_layer_id_2d225da8;")
        cursor.execute("DROP INDEX public.qdjango_layeracl_user_id_413d5dc8;")

        cursor.execute("alter table qdjango_layeracl rename to __qdjango_layeracl;")



def post_layer_acl(apps, schema_editor):
    """
    Check if table __qdjango_layeracl exists.
    If it exists drop qdjango_layeracl and rename __django_layeracl to django_layeracl.
    This is a fix for upgrade from version 3.3.x to 3.4.x
    """
    conn = schema_editor.connection

    with conn.cursor() as cursor:
        cursor.execute("SELECT EXISTS ("
                       "SELECT FROM pg_tables WHERE schemaname = 'public' AND tablename  = '__qdjango_layeracl'"
                       ");")
        row = cursor.fetchone()

    if not row[0]:
        return

    with conn.cursor() as cursor:

        cursor.execute("drop table qdjango_layeracl ;")

        cursor.execute("alter table __qdjango_layeracl rename to qdjango_layeracl;")


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth', '0011_update_proxy_permissions'),
        ('qdjango', '0091_auto_20220209_1356'),
    ]

    operations = [
        migrations.RunPython(pre_layer_acl),
        migrations.CreateModel(
            name='LayerAcl',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='auth.Group')),
                ('layer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='qdjango.Layer')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.RunPython(post_layer_acl),
    ]

