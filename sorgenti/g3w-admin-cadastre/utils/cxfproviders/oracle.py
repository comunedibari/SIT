# coding=utf-8
""""Provider for Oracle.

.. note:: This program is free software; you can redistribute it and/or modify
    it under the terms of the Mozilla Public License 2.0.

"""

__author__ = 'lorenzetti@gis3w.it'
__date__ = '2021-05-13'
__copyright__ = 'Copyright 2015 - 2021, Gis3w'

from django.forms import ValidationError
from django.utils.translation import ugettext, ugettext_lazy as _
from .base import BaseProvider
import cx_Oracle


class ORAProvider(BaseProvider):
    """DB provider for Oracle"""

    def __init__(self, **config_import_cxf):
        super().__init__(**config_import_cxf)

    def connect(self):
        """Create a cx_Oracle connection object"""

        try:

            self.connection = cx_Oracle.connect(
                self.username,
                self.password,
                cx_Oracle.makedsn(self.host, self.port, service_name=self.dbname),
                encoding='UTF-8')

        except Exception as e:
            raise ValidationError(
                _('DB CONNECTION problem: {}'.format(e)))

        super().connect()

    def table_exists(self):
        """
        Check is table exists inside DB

        :return: Table exists
        :return type: bool
        """
        sql = f"SELECT table_name FROM user_tables WHERE table_name='{self.tablename.upper()}'"

        with self.connection.cursor() as cursor:
            cursor.execute(sql)
            res = cursor.fetchall()
            exists = len(res) == 1

        return exists

    def create_table(self):
        """
        Create Table inside DB
        """

        sql_table = f"CREATE TABLE {self.tablename.upper()}  (" \
              "gid NUMBER GENERATED BY DEFAULT AS IDENTITY, " \
              "tipo VARCHAR2(1), " \
              "foglio VARCHAR2(4), " \
              "numero VARCHAR2(5), " \
              "sezione VARCHAR2(1), " \
              "allegato VARCHAR2(1), " \
              "codice_comune VARCHAR2(4) NOT NULL, " \
              "nomefile VARCHAR2(11), " \
              "task_id VARCHAR2(255), " \
              "the_geom SDO_GEOMETRY)"

        with self.connection.cursor() as cursor:
            cursor.execute(sql_table)
        self.connection.commit()


    def clear_table_data_by_cod_com(self):
        """
        Delete from table data with cod_com
        """

        with self.connection.cursor() as cursor:
            cursor.execute(f"DELETE FROM {self.tablename} WHERE codice_comune='{self.cod_com}'")
        self.connection.commit()

    def insert_table_data(self, rows):
        """
        Insert table data by INSERT statement
        """
        with self.connection.cursor() as cursor:
            for raw_data in rows:
                if raw_data is not None:
                    geom = f"SDO_GEOMETRY('{raw_data['sgeometria']}',{raw_data['CRS']})"
                    cursor.setinputsizes(geom=cx_Oracle.CLOB)
                    sql = f"INSERT INTO {self.tablename} (" \
                          f"nomefile, " \
                          f"codice_comune, " \
                          f"tipo, " \
                          f"sezione, " \
                          f"allegato, " \
                          f"foglio, " \
                          f"numero, " \
                          f"task_id, " \
                          f"the_geom) VALUES  (" \
                          f"'{raw_data['nomefile']}'," \
                          f"'{raw_data['codice_comune']}'," \
                          f"'{raw_data['tipo']}'," \
                          f"'{raw_data['sezione']}'," \
                          f"'{raw_data['allegato']}'," \
                          f"'{raw_data['foglio']}'," \
                          f"'{raw_data['numero']}'," \
                          f"'{raw_data['task_id']}', " \
                          f"SDO_GEOMETRY(:geom, {raw_data['CRS']})" \
                          ")"

                    cursor.execute(sql, geom=raw_data['sgeometria'])
                self.connection.commit()
